using System;
using System.Collections.Generic;
using Flame.Compiler;

namespace CompareTest
{
    /// <summary>
    /// A data structure that represents a single token.
    /// </summary>
    public class Token
    {
        public const this(
            set string Contents, set TokenType Type,
            set ISourceDocument Document, set int Offset);

        /// <summary>
        /// Gets the token's contents.
        /// </summary>
        public string Contents { get; private set; }

        /// <summary>
        /// Gets the token's type.
        /// </summary>
        public TokenType Type { get; private set; }

        /// <summary>
        /// Gets the source document this token belongs to.
        /// </summary>
        public ISourceDocument Document { get; private set; }

        /// <summary>
        /// Gets this token's offset in the source document's contents.
        /// </summary>
        public int Offset { get; private set; }

        /// <summary>
        /// Gets this token's source location.
        /// </summary>
        public SourceLocation Location
        {
            get
            {
                return new SourceLocation(Document, Offset, Contents.Length);
            }
        }
    }

    /// <summary>
    /// An enumeration of possible token types.
    /// </summary>
    public enum TokenType : int
    {
        // The end-of-file token
        EndOfFile = -1,
        // An unknown token
        Unknown = 0,
        // A comment
        Comment = 1,
        // Any sequence of identifier characters
        Identifier = 2,
        // Any sequence of whitespace characters
        Whitespace = 3,
        // '$'
        Dollar = 4,
        // '('
        LParen = 5,
        // ')'
        RParen = 6,
        // '@'
        At = 7,
        // '='
        Equals = 8,
        // '{'
        LBrace = 9,
        // '}'
        RBrace = 10,
        // ';'
        Semicolon = 11
    }

    /// <summary>
    /// A number of helper functions for token (types).
    /// </summary>
    public static class TokenHelpers
    {
        static this()
        {
            tokenNames = new Dictionary<TokenType, string>();
            tokenNames[TokenType.EndOfFile] = "end-of-file";
            tokenNames[TokenType.Unknown] = "unknown";
            tokenNames[TokenType.Comment] = "comment";
            tokenNames[TokenType.Identifier] = "identifier";
            tokenNames[TokenType.Dollar] = "$";
            tokenNames[TokenType.LParen] = "(";
            tokenNames[TokenType.RParen] = ")";
            tokenNames[TokenType.At] = "@";
            tokenNames[TokenType.Equals] = "=";
            tokenNames[TokenType.LBrace] = "{";
            tokenNames[TokenType.RBrace] = "}";
            tokenNames[TokenType.Semicolon] = ";";
        }

        private Dictionary<TokenType, string> tokenNames;

        /// <summary>
        /// Names the given token type.
        /// </summary>
        public string NameTokenType(TokenType Type)
        {
            return tokenNames[Type];
        }

        /// <summary>
        /// Gets a boolean value that tells whether the given
        /// token type is a trivial token type.
        /// </summary>
        public bool IsTrivia(TokenType Type)
        {
            return Type == TokenType.Comment || Type == TokenType.Whitespace;
        }

        /// <summary>
        /// Tells if the given token type terminates some structure.
        /// </summary>
        public bool TerminatesStructure(TokenType Type)
        {
            return Type == TokenType.RBrace || Type == TokenType.RParen
                || Type == TokenType.Semicolon || Type == TokenType.EndOfFile;
        }

        /// <summary>
        /// Checks if the given character is an identifier-head character.
        /// </summary>
        public bool IsIdentifierHeadChar(char Value)
        {
            return char.IsLetter(Value);
        }

        /// <summary>
        /// Checks if the given character is an identifier-tail character.
        /// </summary>
        public bool IsIdentifierTailChar(char Value)
        {
            return IsIdentifierHeadChar(Value)
                || char.IsDigit(Value)
                || Value == '-';
        }
    }
}
