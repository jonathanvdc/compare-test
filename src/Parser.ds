using System;
using System.Collections.Generic;
using Pixie;

namespace CompareTest
{
    /// <summary>
    /// A compare-test testing file parser.
    /// </summary>
    public class Parser
    {
        public const this(set Flame.Compiler.ICompilerLog Log);

        /// <summary>
        /// Gets the compiler log that is associated with this parser.
        /// </summary>
        public Flame.Compiler.ICompilerLog Log { get; private set; }

        /// <summary>
        /// Parses an expression, which may consist of more than one expression.
        /// </summary>
        public IExpression ParseExpression(TokenBuffer Buffer)
        {
            IExpression result = EmptyExpression;
            while (!TokenHelpers.TerminatesStructure(Buffer.PeekToken().Type))
            {
                result = new ConcatExpression(result, ParsePrimitiveExpression(Buffer));
            }
            return result;
        }

        /// <summary>
        /// Parses a primitive expression.
        /// </summary>
        public IExpression ParsePrimitiveExpression(TokenBuffer Buffer)
        {
            var peek = Buffer.PeekToken();
            if (peek.Type == TokenType.Dollar)
            {
                return ParseVariableExpression(Buffer);
            }
            else if (peek.Type == TokenType.At)
            {
                return ParseCommandExpression(Buffer);
            }
            else if (peek.Type == TokenType.Comment)
            {
                // Eat the comment, and proceed.
                Buffer.ExpectToken(TokenType.Comment, Log);
                return ParsePrimitiveExpression(Buffer);
            }
            else
            {
                return new TokenExpression(Buffer.ReadToken());
            }
        }

        /// <summary>
        /// Parses a get-variable expression.
        /// </summary>
        public VariableExpression ParseVariableExpression(TokenBuffer Buffer)
        {
            Buffer.ExpectNontrivialToken(TokenType.Dollar, Log);
            bool isParenthesized = Buffer.PeekNontrivialToken().Type == TokenType.LParen;
            if (isParenthesized)
            {
                Buffer.ExpectNontrivialToken(TokenType.LParen, Log);
            }
            var ident = Buffer.ExpectNontrivialToken(TokenType.Identifier, Log);
            if (isParenthesized)
            {
                Buffer.ExpectNontrivialToken(TokenType.RParen, Log);
            }
            return new VariableExpression(ident);
        }

        /// <summary>
        /// Parses a command-expression.
        /// </summary>
        public IExpression ParseCommandExpression(TokenBuffer Buffer)
        {
            var atTok = Buffer.ExpectNontrivialToken(TokenType.At, Log);
            var lParen = Buffer.ExpectNontrivialToken(TokenType.LParen, Log);
            var cmd = ParseCommand(Buffer);
            if (Buffer.PeekNontrivialToken().Type == TokenType.Comma)
            {
                var comma = Buffer.ExpectNontrivialToken(TokenType.Comma, Log);
                var exitCode = ParseExpression(Buffer);
                var rParen = Buffer.ExpectNontrivialToken(TokenType.RParen, Log);
                return new ExitCheckingCommandExpression(
                    atTok, lParen, cmd, comma, exitCode, rParen);
            }
            else
            {
                var rParen = Buffer.ExpectNontrivialToken(TokenType.RParen, Log);
                return new CommandExpression(atTok, lParen, cmd, rParen);
            }
        }

        /// <summary>
        /// Parses an statement from the given token buffer.
        /// </summary>
        public IStatement ParseStatement(TokenBuffer Buffer)
        {
            var peek = Buffer.PeekNontrivialToken();
            if (peek.Type == TokenType.Identifier &&
                Buffer.PeekNontrivialToken(1).Type == TokenType.Equals)
            {
                return ParseAssignmentStatement(Buffer);
            }
            else if (peek.Type == TokenType.Semicolon)
            {
                Buffer.ExpectNontrivialToken(TokenType.Semicolon, Log);
                return EmptyStatement;
            }
            else if (peek.Type == TokenType.TemplateKeyword)
            {
                return ParseTemplateStatement(Buffer);
            }
            else
            {
                return ParseCommandStatement(Buffer);
            }
        }

        /// <summary>
        /// Parses an assignment statement from the given token buffer.
        /// </summary>
        public AssignmentStatement ParseAssignmentStatement(TokenBuffer Buffer)
        {
            var ident = Buffer.ExpectNontrivialToken(TokenType.Identifier, Log);
            var eqSign = Buffer.ExpectNontrivialToken(TokenType.Equals, Log);
            var expr = ParseExpression(Buffer);
            var semicolon = Buffer.ExpectNontrivialToken(TokenType.Semicolon, Log);
            return new AssignmentStatement(ident, eqSign, expr, semicolon);
        }

        /// <summary>
        /// Parses a command statement from the given token buffer.
        /// </summary>
        public CommandStatement ParseCommandStatement(TokenBuffer Buffer)
        {
            var cmd = ParseCommand(Buffer);
            var semicolon = Buffer.ExpectNontrivialToken(TokenType.Semicolon, Log);
            return new CommandStatement(cmd, semicolon);
        }

        /// <summary>
        /// Parses a statement that is either a template definition or a
        /// template instance.
        /// </summary>
        public IStatement ParseTemplateStatement(TokenBuffer Buffer)
        {
            var keyword = Buffer.ExpectNontrivialToken(
                TokenType.TemplateKeyword, Log);
            var name = Buffer.ExpectNontrivialToken(
                TokenType.TemplateKeyword, Log);
            var argList = new List<IExpression>();
            Buffer.ExpectNontrivialToken(
                TokenType.LessThan, Log);
            while (true)
            {
                argList.Add(ParseExpression(Buffer));

                if (Buffer.PeekNontrivialToken().Type == TokenType.Comma)
                    Buffer.ExpectNontrivialToken(TokenType.Comma, Log);
                else
                    break;
            }
            Buffer.ExpectNontrivialToken(
                TokenType.GreaterThan, Log);

            if (Buffer.PeekNontrivialToken().Type == TokenType.Semicolon)
            {
                Buffer.ExpectNontrivialToken(TokenType.Semicolon, Log);
                return new TemplateInstantiationStatement(keyword, name, argList);
            }

            var lBRace = Buffer.ExpectNontrivialToken(TokenType.LBrace, Log);
            var sec = ParseSectionContents(name, Buffer);
            var rBrace = Buffer.ExpectNontrivialToken(TokenType.RBrace, Log);
            return new TemplateDefinitionStatement(
                keyword, name, argList, lBRace, sec, rBrace);
        }

        /// <summary>
        /// Parses a command from the given token buffer.
        /// </summary>
        public ICommand ParseCommand(TokenBuffer Buffer)
        {
            var expr = ParseExpression(Buffer);
            var peek = Buffer.PeekNontrivialToken();
            if (peek.Type == TokenType.ForwardPipe)
            {
                return ParseCommandSuffix(ParseInvokeWithInputCommand(expr, Buffer), Buffer);
            }
            else
            {
                return ParseCommandSuffix(new InvokeProgramCommand(expr), Buffer);
            }
        }

        /// <summary>
        /// Parses an optional command suffix.
        /// </summary>
        private ICommand ParseCommandSuffix(
            ICommand InnerCommand, TokenBuffer Buffer)
        {
            var peek = Buffer.PeekNontrivialToken();
            if (peek.Type == TokenType.Bar)
            {
                return ParseCommandSuffix(ParsePipeToProgramCommand(InnerCommand, Buffer), Buffer);
            }
            else if (peek.Type == TokenType.GreaterThan)
            {
                return ParsePipeToFileCommand(InnerCommand, Buffer);
            }
            else
            {
                return InnerCommand;
            }
        }

        /// <summary>
        /// Parses a pipe-to-program command.
        /// </summary>
        public ICommand ParseInvokeWithInputCommand(IExpression InputExpression, TokenBuffer Buffer)
        {
            var bar = Buffer.ExpectNontrivialToken(TokenType.ForwardPipe, Log);
            var expr = ParseExpression(Buffer);
            return new InvokeProgramWithInputCommand(InputExpression, bar, expr);
        }

        /// <summary>
        /// Parses a pipe-to-program command.
        /// </summary>
        public ICommand ParsePipeToProgramCommand(ICommand InputCommand, TokenBuffer Buffer)
        {
            var bar = Buffer.ExpectNontrivialToken(TokenType.Bar, Log);
            var expr = ParseExpression(Buffer);
            return new PipeToProgramCommand(InputCommand, bar, expr);
        }

        /// <summary>
        /// Parses a pipe-to-file command.
        /// </summary>
        public ICommand ParsePipeToFileCommand(ICommand InputCommand, TokenBuffer Buffer)
        {
            var gt = Buffer.ExpectNontrivialToken(TokenType.GreaterThan, Log);
            var expr = ParseExpression(Buffer);
            return new PipeToFileCommand(InputCommand, gt, expr);
        }

        /// <summary>
        /// Parses a test description section from the given token buffer.
        /// </summary>
        public Section ParseSection(TokenBuffer Buffer)
        {
            var ident = Buffer.ExpectNontrivialToken(TokenType.Identifier, Log);
            Buffer.ExpectNontrivialToken(TokenType.LBrace, Log);
            var result = ParseSectionContents(ident, Buffer);
            Buffer.ExpectNontrivialToken(TokenType.RBrace, Log);
            return result;
        }

        /// <summary>
        /// Parses the root section of the given buffer. This is equivalent
        /// to the entire test description.
        /// </summary>
        public Section ParseRootSection(TokenBuffer Buffer)
        {
            return ParseSectionContents(
                new Token("", TokenType.Identifier, Buffer.Tokenizer.Document, 0),
                Buffer);
        }

        /// <summary>
        /// Parses a section's contents.
        /// </summary>
        private Section ParseSectionContents(Token Name, TokenBuffer Buffer)
        {
            var stmts = new List<IStatement>();
            var subsections = new Dictionary<string, Section>();
            while (!TokenHelpers.TerminatesStructure(Buffer.PeekNontrivialToken().Type))
            {
                if (Buffer.PeekNontrivialToken(0).Type == TokenType.Identifier &&
                    Buffer.PeekNontrivialToken(1).Type == TokenType.LBrace)
                {
                    var sec = ParseSection(Buffer);
                    string secName = sec.Name.Contents;
                    if (subsections.ContainsKey(secName))
                    {
                        // Log an error if we try to redefine a section.
                        var nodes = new List<MarkupNode>();
                        nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "section '"));
                        nodes.Add(new MarkupNode(NodeConstants.BrightNodeType, secName));
                        nodes.Add(new MarkupNode(NodeConstants.TextNodeType, "' is defined more than once in the same scope."));

                        Log.LogError(new Flame.Compiler.LogEntry(
                            "section redefinition",
                            new MarkupNode("entry", nodes),
                            sec.Name.Location));
                    }
                    subsections[secName] = sec;
                }
                else
                {
                    stmts.Add(ParseStatement(Buffer));
                }
            }
            return new Section(Name, stmts, subsections);
        }
    }
}
