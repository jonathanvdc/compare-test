using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using Flame.Compiler;
using Flame.Front;
using Flame.Front.Cli;
using Flame.Front.Options;

namespace CompareTest
{
    /// <summary>
    /// An object that logs test outcomes, and records the percentage of completed
    /// tests as well.
    /// </summary>
    public class PercentageLogger
    {
        public this(set ConsoleLog Log)
        {
            this.outcomeIndex = 0;
        }

        /// <summary>
        /// Gets this percentage logger's underlying console log.
        /// </summary>
        public ConsoleLog Log { get; private set; }

        private int outcomeIndex;

        /// <summary>
        /// Logs a test outcome.
        /// </summary>
        public void LogOutcome(TestOutcome Outcome, int TotalOutcomeCount)
        {
            Monitor.Enter(Log.SyncRoot);
            try
            {
                outcomeIndex++;
                double percentage = 100.0 * (double)outcomeIndex / (double)TotalOutcomeCount;
                string percentageStr = (string)(int)Math.Round(percentage);
                while (percentageStr.Length < 3)
                    percentageStr = " " + percentageStr;
                if (Outcome.HasFailed)
                    Log.Console.Write("[" + percentageStr + "%]", Log.ErrorStyle);
                else
                    Log.Console.Write("[" + percentageStr + "%]", Log.MessageStyle);
                Log.Console.Write(" ");
                Log.Console.Write(Outcome.Name.Name, Log.ContrastForegroundColor);
                Log.Console.Write(" - ");
                Log.Console.Write(Outcome.Config.Name);
                Log.Console.WriteLine();
            }
            finally
            {
                Monitor.Exit(Log.SyncRoot);
            }
        }
    }

    public static class Program
    {
        alias SectionTuple = Tuple<Section, Configuration, ExecutionState>;

        public const string UnixPlatformName = "unix";
        public const string MacOSXPlatformName = "osx";
        public const string WindowsPlatformName = "windows";
        public const string PlatformKey = "platform";
        public const string NetRuntimeKey = "net-runtime";
        public const string ReadFileKey = "cat";
        public const string MakeDirectoryRecursiveKey = "mkdir-rec";

        private string GetPlatformName()
        {
            var platform = Environment.OSVersion.Platform;
            if (platform == PlatformID.Unix)
                return UnixPlatformName;
            else if (platform == PlatformID.MacOSX)
                return MacOSXPlatformName;
            else
                return WindowsPlatformName;
        }

        private Configuration GetDefaultConfiguration(BuildArguments Args)
        {
            var configOptions = new Dictionary<string, string>();
            string platform = GetPlatformName();
            configOptions[PlatformKey] = platform;
            if (platform == WindowsPlatformName)
            {
                // No need to explicitly name the runtime on Windows.
                configOptions[NetRuntimeKey] = "";
                configOptions[ReadFileKey] = ExecutionState.BuiltinCat;
                configOptions[MakeDirectoryRecursiveKey] = "mkdir";
            }
            else
            {
                // Explicitly use 'mono' on other platforms.
                configOptions[NetRuntimeKey] = "mono";
                configOptions[ReadFileKey] = "cat";
                configOptions[MakeDirectoryRecursiveKey] = "mkdir -p";
            }
            configOptions[TestCase.WorkingDirectoryKey] = Environment.CurrentDirectory;
            foreach (var key in Args.Options)
            {
                var sb = new StringBuilder();
                foreach (var opt in Args.GetOption<string[]>(key, new string[] { }))
                {
                    if (sb.Length > 0)
                        sb.Append(' ');
                    sb.Append(opt);
                }
                configOptions[key] = sb.ToString();
            }
            return new Configuration(
                "default", configOptions, new Dictionary<string, Template>());
        }

        public void Main(string[] Args)
        {
            // Parse build arguments, create a log
            var optParser = StringOptionParser.CreateDefault();
            var options = BuildArguments.Parse(optParser, Args);
            var log = new ConsoleLog(ConsoleEnvironment.AcquireConsole(options), options);
            var filtLog = new FilteredLog(options.GetLogFilter(), log);

            var config = GetDefaultConfiguration(options);

            var allTests = ReadAllTests(options.SourcePaths, filtLog, config);

            // Get the number of parallel tasks to use.
            int taskCount = options.GetOption<int>("j", 1);
            if (taskCount <= 0)
                taskCount = Environment.ProcessorCount;

            var manager = new TestManager(allTests, CreatePercentageLogger(log), taskCount);
            var outcomes = manager.RunTests();
            var failures = FilterFailures(outcomes);
            log.Console.Write("Ran ");
            log.Console.Write(ToCountString(outcomes.Count, "test configuration"), log.ContrastForegroundColor);

            int exitCode = 0;
            if (failures.Count == 0)
            {
                log.Console.Write(", all of which were ");
                log.Console.Write("successful", log.MessageStyle);
                log.Console.Write(".");
                log.Console.WriteLine();
                if (filtLog.ErrorCount > 0)
                {
                    log.Console.Write("Encountered some ");
                    log.Console.Write("internal errors", log.ErrorStyle);
                    log.Console.Write(" on the way, though.");
                    log.Console.WriteLine();
                    exitCode = 1;
                }
            }
            else
            {
                log.Console.Write(". Found ");
                log.Console.Write(ToCountString(failures.Count, "failure"), log.ErrorStyle)
                log.Console.Write(".");
                log.Console.WriteLine();
                exitCode = 1;
            }

            Environment.ExitCode = exitCode;
        }

        private string ToCountString(int Count, string Type)
        {
            string prefix = Count + " " + Type;
            if (Count == 1)
                return prefix;
            else
                return prefix + "s";
        }

        private IReadOnlyList<TestOutcome> FilterFailures(IReadOnlyList<TestOutcome> Outcomes)
        {
            var results = new List<TestOutcome>();
            foreach (var item in Outcomes)
            {
                if (item.HasFailed)
                    results.Add(item);
            }
            return results;
        }

        private void(TestOutcome, int) CreatePercentageLogger(ConsoleLog Log)
        {
            return new PercentageLogger(Log).LogOutcome;
        }

        /// <summary>
        /// Reads a single test file description, specified by the given path.
        /// </summary>
        public Section ReadTestDescription(PathIdentifier Path, ICompilerLog Log)
        {
            Section result = null;
            FileStream fs = null;
            try
            {
                fs = new FileStream(Path.Path, FileMode.Open, FileAccess.Read);
                var reader = new StreamReader(fs);
                try
                {
                    var text = reader.ReadToEnd();
                    var srcDoc = new SourceDocument(text, Path.Path);
                    var tokBuf = new TokenBuffer(new Lexer(srcDoc));
                    var parser = new Parser(Log);
                    result = parser.ParseRootSection(tokBuf);
                }
                finally
                {
                    reader.Dispose();
                }
            }
            catch (FileNotFoundException ex)
            {
                Log.LogError(new LogEntry("file not found", "the file at '" + Path + "' could not be found."));
            }
            catch (DirectoryNotFoundException ex)
            {
                Log.LogError(new LogEntry("directory not found", "could not find a part of the path '" + Path + "'."));
            }
            finally
            {
                if (fs != null)
                    fs.Dispose();
            }
            return result;
        }

        private void NotifyInvalidSubtest(IStatement Command, ICompilerLog Log)
        {
            Log.LogError(new LogEntry(
                "invalid subtest",
                "this is not a valid subtest specification. " +
                "Subtests should be encoded as a sequence of semicolon-delimited " +
                "paths, or as template instantiations.",
                Command.Location));
        }

        private void ExpandTemplateSubtest(
            TemplateInstantiationStatement Command, ICompilerLog Log,
            Configuration Config, ExecutionState State,
            PathIdentifier BasePath,
            List<TestCase> Results,
            HashSet<string> ParsedPaths)
        {
            Template templateDef;
            if (!Config.Templates.TryGetValue(Command.TemplateName.Contents, &templateDef))
            {
                Log.LogError(new LogEntry(
                    "undefined template",
                    "could not find a definition for 'template " +
                    Command.TemplateName.Contents + "'.",
                    Command.Location));
                return;
            }

            var args = new List<string>();
            var argMapping = new Dictionary<string, string>();
            foreach (var paramName in templateDef.ParameterNames,
                     var argExpr in Command.Arguments)
            {
                string evalArg = argExpr.Evaluate(Config, State);
                argMapping[paramName] = evalArg;
                args.Add(evalArg);
            }

            var synthesizedName = new StringBuilder();
            synthesizedName.Append(BasePath.Name);
            synthesizedName.Append(":");
            synthesizedName.Append(templateDef.Name);
            synthesizedName.Append("<");
            bool first = true;
            foreach (var item in args)
            {
                if (first)
                    first = false;
                else
                    synthesizedName.Append(", ");

                synthesizedName.Append(item);
            }
            synthesizedName.Append(">");

            var templateName = new TestCaseName(BasePath, synthesizedName.ToString());
            var newConfig = Config.CreateSubconfiguration(
                Config.Name, argMapping);

            ReadTestsRecursive(
                templateName, templateDef.Contents, Log,
                newConfig, State, Results, ParsedPaths);
        }

        /// <summary>
        /// Reads a single subtest, as specified by the given command.
        /// </summary>
        private void ReadSubtest(
            IStatement Command, ICompilerLog Log,
            Configuration Config, ExecutionState State,
            PathIdentifier BasePath,
            List<TestCase> Results,
            HashSet<string> ParsedPaths)
        {
            if (Command is TemplateInstantiationStatement)
                return ExpandTemplateSubtest(
                    (TemplateInstantiationStatement)Command, Log,
                    Config, State, BasePath, Results, ParsedPaths);

            if (!(Command is CommandStatement))
            {
                NotifyInvalidSubtest(Command, Log);
                return;
            }

            var cmdStmt = (CommandStatement)Command;

            if (!(cmdStmt.Command is InvokeProgramCommand))
            {
                NotifyInvalidSubtest(Command, Log);
                return;
            }

            var invCmd = (InvokeProgramCommand)cmdStmt.Command;

            var pathStr = invCmd.ProgramArgs.Evaluate(Config, State).Trim(null);
            ReadTestsRecursive(
                new PathIdentifier(BasePath.Parent, pathStr),
                Log, Config, State, Results, ParsedPaths);
        }

        /// <summary>
        /// Reads the test description specified by the given path,
        /// as well as all of its children. The test description has already
        /// been parsed, and is given.
        /// </summary>
        private void ReadTestsRecursive(
            TestCaseName Name, Section TestDescription,
            ICompilerLog Log, Configuration Config,
            ExecutionState State, List<TestCase> Results,
            HashSet<string> ParsedPaths)
        {
            // Fork the parent execution state.
            var secState = State.Fork(Name.Path.AbsolutePath.Parent.Path);
            // Run the 'init' section first.
            var secInitStmt = TestDescription.GetOptionalStatementSection(
                TestCase.InitializationSectionName);
            // Execute that statement to obtain a configuration object for
            // this section.
            var secConfig = secInitStmt.Execute(Config, secState);

            // Create a section tuple for this section, and add it to the
            // results dictionary.
            Results.Add(new TestCase(Name, TestDescription, secConfig, secState));

            // Then try to find subtests in the 'tests' section.
            if (TestDescription.Sections.TryGetValue(TestCase.TestsSectionName, &Section subtests))
            {
                foreach (var item in subtests.Statements)
                {
                    // Parse all subtest "command statements"
                    ReadSubtest(
                        item, Log, secConfig, secState,
                        Name.Path, Results, ParsedPaths);
                }
            }
        }

        /// <summary>
        /// Reads the test description specified by the given path,
        /// as well as all of its children.
        /// </summary>
        private void ReadTestsRecursive(
            PathIdentifier Path, ICompilerLog Log,
            Configuration Config, ExecutionState State,
            List<TestCase> Results,
            HashSet<string> ParsedPaths)
        {
            string absPath = Path.AbsolutePath.Path;
            if (!ParsedPaths.Add(absPath))
                // Looks like we have already parsed this file. Skip it.
                return;

            var sec = ReadTestDescription(Path, Log);
            if (sec == null)
                // Couldn't (properly) parse the test description.
                // No shame in that.
                return;

            return ReadTestsRecursive(
                new TestCaseName(Path),
                sec,
                Log,
                Config,
                State,
                Results,
                ParsedPaths);
        }

        /// <summary>
        /// Reads all tests, as specified by the given sequence of paths.
        /// These tests are returned as a dictionary that maps path identifiers
        /// to tuples, which consist of a section,
        /// said section's configuration and its execution state.
        /// </summary>
        public IReadOnlyList<TestCase> ReadAllTests(
            [PathIdentifier] Paths, ICompilerLog Log,
            Configuration Config)
        {
            var results = new List<TestCase>();
            var visitedPaths = new HashSet<string>();
            var state = new ExecutionState(
                Config.Variables[TestCase.WorkingDirectoryKey], Log);
            foreach (var item in Paths)
            {
                ReadTestsRecursive(item, Log, Config, state, results, visitedPaths);
            }
            return results;
        }
    }
}
