using System;
using System.Collections.Generic;
using System.IO;
using Flame.Compiler;
using Flame.Front;
using Flame.Front.Cli;
using Flame.Front.Options;

namespace CompareTest
{
    public static class Program
    {
        private string GetPlatformName()
        {
            var platform = Environment.OSVersion.Platform;
            if (platform == PlatformID.Unix)
                return "unix";
            else if (platform == PlatformID.MacOSX)
                return "osx";
            else
                return "windows";
        }

        public void Main(string[] Args)
        {
            // Parse build arguments, create a log
            var optParser = StringOptionParser.CreateDefault();
            var options = BuildArguments.Parse(optParser, Args);
            var log = new ConsoleLog(ConsoleEnvironment.AcquireConsole(options), options);

            /* var sections = new Dictionary<string, Section>();
            var buildLines = new List<IStatement>();
            buildLines.Add(new CommandStatement(new ConcatExpression(new ReplacementExpression("dsc"), new VerbatimExpression(" --version"))));
            sections["run"] = new Section("run", buildLines, new Dictionary<string, Section>());
            var root = new Section("", new List<IStatement>(), sections);
            // Console.WriteLine(root.ToString());

            var configOptions = new Dictionary<string, string>();
            configOptions["platform"] = GetPlatformName();
            configOptions["net-runtime"] = "mono";
            configOptions["dsc"] = "dsc";
            configOptions[TestManager.WorkingDirectoryKey] = Environment.CurrentDirectory;
            var config = new Configuration("default", configOptions);
            // Console.WriteLine(config.ToString());

            var manager = new TestManager(config);
            manager.RunTest(root); */
        }
    }
}
