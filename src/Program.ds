using System;
using System.Collections.Generic;
using System.IO;
using Flame.Compiler;
using Flame.Front;
using Flame.Front.Cli;
using Flame.Front.Options;

namespace CompareTest
{
    public static class Program
    {
        private string GetPlatformName()
        {
            var platform = Environment.OSVersion.Platform;
            if (platform == PlatformID.Unix)
                return "unix";
            else if (platform == PlatformID.MacOSX)
                return "osx";
            else
                return "windows";
        }

        public void Main(string[] Args)
        {
            // Parse build arguments, create a log
            var optParser = StringOptionParser.CreateDefault();
            var options = BuildArguments.Parse(optParser, Args);
            var log = new ConsoleLog(ConsoleEnvironment.AcquireConsole(options), options);

             var configOptions = new Dictionary<string, string>();
             configOptions["platform"] = GetPlatformName();
             configOptions["net-runtime"] = "mono";
             configOptions[TestManager.WorkingDirectoryKey] = Environment.CurrentDirectory;
             var config = new Configuration("default", configOptions);

            foreach (var srcPath in options.SourcePaths)
            {
                var root = ReadTestDescription(srcPath, log);
                var manager = new TestManager(config);
                manager.RunTest(root);
            }
        }

        public Section ReadTestDescription(PathIdentifier Path, ICompilerLog Log)
        {
            var fs = new FileStream(Path.Path, FileMode.Open, FileAccess.Read);
            try
            {
                var reader = new StreamReader(fs);
                try
                {
                    var text = reader.ReadToEnd();
                    var srcDoc = new SourceDocument(text, Path.Path);
                    var tokBuf = new TokenBuffer(new Lexer(srcDoc));
                    var parser = new Parser(Log);
                    return parser.ParseRootSection(tokBuf);
                }
                finally
                {
                    reader.Dispose();
                }
            }
            finally
            {
                fs.Dispose();
            }
        }
    }
}
