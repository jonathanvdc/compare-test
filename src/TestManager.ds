using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using Flame.Compiler;
using Flame.Front;
using Flame.Front.Cli;
using Flame.Front.Options;
using Pixie;

namespace CompareTest
{
    /// <summary>
    /// A data structure that describes the outcome of a test.
    /// </summary>
    public class TestOutcome
    {
        public const this(
            set TestCaseName Name, set Configuration Config,
            set bool HasFailed);

        /// <summary>
        /// Gets the test's name and path.
        /// </summary>
        public TestCaseName Name { get; private set; }

        /// <summary>
        /// Gets the test's configuration.
        /// </summary>
        public Configuration Config { get; private set; }

        /// <summary>
        /// Gets a boolean that tells if this test was a failure.
        /// </summary>
        public bool HasFailed { get; private set; }
    }

    /// <summary>
    /// A test case that has been primed for execution.
    /// </summary>
    public class TestExecution
    {
        public this(
            set TestCase Test, set void(TestOutcome, int) LogCompleted,
            set int TotalConfigurationCount)
        { }

        /// <summary>
        /// Gets the test case to run.
        /// </summary>
        public TestCase Test { get; private set; }

        /// <summary>
        /// A delegate that logs a message that notifies the user of the outcome
        /// of the given test. The total number of tests/configuration pairs
        /// is also given.
        /// </summary>
        public void(TestOutcome, int) LogCompleted { get; private set; }

        /// <summary>
        /// Gets the total number of configurations.
        /// </summary>
        public int TotalConfigurationCount { get; private set; }

        /// <summary>
        /// Runs this configuration.
        /// </summary>
        public IReadOnlyList<TestOutcome> Run()
        {
            return Test.Run(LogCompleted, TotalConfigurationCount);
        }
    }

    /// <summary>
    /// An entity that runs tests.
    /// </summary>
    public class TestProcessor
    {
        public this(
            IEnumerable<TestCase> Tests,
            set void(TestOutcome, int) LogCompleted,
            set int TotalConfigurationCount)
        {
            this.Tests = new ConcurrentQueue<TestCase>(Tests);
            this.outcomeLists = new ConcurrentQueue<List<TestOutcome>>();
        }

        /// <summary>
        /// Gets the queue of tests to process.
        /// </summary>
        public ConcurrentQueue<TestCase> Tests { get; private set; }

        private ConcurrentQueue<List<TestOutcome>> outcomeLists;

        /// <summary>
        /// Gets the set of resulting outcomes.
        /// </summary>
        public IEnumerable<TestOutcome> Outcomes
        {
            get
            {
                return Enumerable.SelectMany<List<TestOutcome>, TestOutcome>(
                    outcomeLists, IEnumerable<TestOutcome>(List<TestOutcome> x) => x);
            }
        }

        /// <summary>
        /// A delegate that logs a message that notifies the user of the outcome
        /// of the given test. The total number of tests/configuration pairs
        /// is also given.
        /// </summary>
        public void(TestOutcome, int) LogCompleted { get; private set; }

        /// <summary>
        /// Gets the total number of configurations.
        /// </summary>
        public int TotalConfigurationCount { get; private set; }

        /// <summary>
        /// Dequeues a single item from the queue of test cases.
        /// </summary>
        private bool TryDequeueTestCase(
            out TestCase^ Test, out List<TestOutcome>^ OutcomeBag)
        {
            if (Tests.TryDequeue(Test))
            {
                var resultList = new List<TestOutcome>();
                outcomeLists.Enqueue(resultList);
                *OutcomeBag = resultList;
                return true;
            }
            else
            {
                *OutcomeBag = null;
                return false;
            }
        }

        /// <summary>
        /// Processes tests until the input queue is empty.
        /// </summary>
        public void Run()
        {
            TestCase testCase;
            List<TestOutcome> outcomeList;
            while (TryDequeueTestCase(&testCase, &outcomeList))
            {
                var exec = new TestExecution(
                    testCase, LogCompleted, TotalConfigurationCount);

                outcomeList.AddRange(exec.Run());
            }
        }
    }

    /// <summary>
    /// A class of objects that take care of running tests.
    /// </summary>
    public class TestManager
    {
        alias ConfigDict = Dictionary<string, IStatement>;

        public this(
            set IReadOnlyList<TestCase> Tests,
            set void(TestOutcome, int) LogCompleted)
        {
            this.ParallelTaskCount = 1;
        }

        public this(
            set IReadOnlyList<TestCase> Tests,
            set void(TestOutcome, int) LogCompleted,
            set int ParallelTaskCount)
            in { ParallelTaskCount > 0 }
        { }

        /// <summary>
        /// Gets a dictionary of all tests to run.
        /// </summary>
        public IReadOnlyList<TestCase> Tests { get; private set; }

        /// <summary>
        /// A delegate that logs a message that notifies the user of the outcome
        /// of the given test. The total number of tests/configuration pairs
        /// is also given.
        /// </summary>
        public void(TestOutcome, int) LogCompleted { get; private set; }

        /// <summary>
        /// Gets the number of parallel tasks to launch.
        /// </summary>
        public int ParallelTaskCount { get; private set; }

        /// <summary>
        /// Runs all tests stored in this test manager. All test outcomes are
        /// stored in a list, which is returned.
        /// </summary>
        public IReadOnlyList<TestOutcome> RunTests()
        {
            // Compute the total number of configurations.
            int totalConfigCount = 0;
            foreach (var testCase in Tests)
            {
                totalConfigCount += testCase.Configurations.Count;
            }

            var processor = new TestProcessor(
                Tests, LogCompleted, totalConfigCount);

            if (ParallelTaskCount == 1)
            {
                // Run all tests sequentially.
                processor.Run();
            }
            else
            {
                // Run all tests in parallel.
                var tasks = new List<Task>();
                for (int i = 0; i < ParallelTaskCount; i++)
                {
                    tasks.Add(Task.Run(processor.Run));
                }
                // Wait for all tasks to complete.
                Task.WhenAll(tasks).Wait();
            }

            return new List<TestOutcome>(processor.Outcomes);
        }
    }
}
